name: terraform-plan-apply
run-name: ${{ github.event.workflow_run.head_commit.message }}

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    outputs:
      environment_value: ${{ steps.check_env.outputs.environment }}
    env:
      ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Get PR Labels
      id: get_labels
      run: |
        echo "labels=$(echo '${{ toJson(github.event.pull_request.labels) }}' | jq -r '.[].name')" >> $GITHUB_ENV

    - name: Check for Environment Label
      id: check_env
      run: |
        if echo "$labels" | grep -E 'environment:'; then
          echo "environment_found=true" >> $GITHUB_ENV
          # Extract the specific environment name
          environment=$(echo "$labels" | grep -oP 'environment:\s*\K.*')
          echo "environment=$environment" >> $GITHUB_ENV
          echo "::set-output name=environment::${environment}"
        else
          echo "environment_found=false" >> $GITHUB_ENV
        fi

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cp ./${{ env.environment }}/* .
        terraform init

    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        cp ./${{ env.environment }}/* .
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi

    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan

  terraform-apply:
    name: 'Terraform Apply'
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: production
    needs: [terraform-plan]
    env:
      ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
      environment: ${{ needs.terraform-plan.outputs.environment_value }}
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cp ./${{ env.environment }}/* .
        terraform init

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan

    # Terraform Apply
    - name: Terraform Apply
      run: |
        cp ./${{ env.environment }}/* .
        terraform apply -auto-approve tfplan
      # echo Running terraform apply
