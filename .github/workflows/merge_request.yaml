name: terraform-plan
run-name: ${{ github.event.workflow_run.head_commit.message }}

on:
  pull_request:
    types: [labeled]
    branches:
      - main

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Get PR Labels
      id: get_labels
      run: |
        echo ${{ github.event.pull_request.labels.*.name }}
        echo "labels=$(echo '${{ github.event.pull_request.labels }}' | jq -r '.[] | .name')" >> $GITHUB_ENV

    - name: Fetch PR diff
      run: git fetch origin pull/${{ github.event.pull_request.number }}/head

    - name: Check for Environment Label
      id: check_env
      run: |
        if echo "$labels" | grep -E 'environment:'; then
          echo "environment_found=true" >> $GITHUB_ENV
          # Extract the specific environment name
          environment=$(echo "$labels" | grep -oP 'environment:\s*\K.*')
          echo "environment=$environment" >> $GITHUB_ENV
        else
          echo "environment_found=false" >> $GITHUB_ENV
        fi

    - name: Triggered by Environment Label
      if: env.environment_found == 'true'
      run: |
        echo "Environment label detected: ${{ env.environment }}"

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        az account set --subscription="${{ secrets.AZ_SUBSCRIPTION_ID }}"
        terraform init

    - name: Terraform Plan
      run: |
        export exitcode=0
        az account set --subscription=${{ secrets.AZ_SUBSCRIPTION_ID }} 
        ls -lah
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi

    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY


    # If changes are detected, create a new issue
    - name: Publish Drift Report
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.ARGOCD_GITHUB_PAT }}
          script: |
            const body = `${process.env.SUMMARY}`;
            const title = 'Terraform Configuration Drift Detected';
            const creator = 'github-actions[bot]'
          
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              creator: creator,
              body: body
            })
